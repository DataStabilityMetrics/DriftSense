{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DriftSense","text":"<p>Welcome to the DriftSense documentation!</p> <p>The <code>DriftSense</code> package is designed to calculate the drift or stability of data distributions across datasets. This is a critical metric for evaluating changes in data distributions over time and ensuring the continued validity of AI/ML models.</p>"},{"location":"#overview","title":"Overview","text":"<p>This package enables:</p> <ul> <li>Binning of features using multiple strategies</li> </ul> <ul> <li>Evaluation of feature, target, and model stability</li> <li>Regulatory compliance support (e.g., SR11/7 in banking)</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li><code>Python 3.7+</code></li> <li><code>numpy</code></li> <li><code>scikit-learn</code></li> </ul>"},{"location":"#get-started","title":"Get Started","text":"<p>Quickly explore powerful tools to ensure data stability, detect and monitor data drift, model drift \u2014 all in one seamless package.</p> <p>Usage Guide API Reference</p>"},{"location":"#why-driftsense","title":"Why DriftSense?","text":"<ul> <li>Easy to integrate in ML pipelines</li> <li>Powerful stability/drift metrics</li> <li>Open source and community driven</li> </ul>"},{"location":"binningstrategies/","title":"DriftSense","text":"<p>Welcome to the DriftSense documentation!</p> <p>The <code>DriftSense</code> package is designed to calculate the drift or stability of data distributions across datasets. This is a critical metric for evaluating changes in data distributions over time and ensuring the continued validity of AI/ML models.</p>"},{"location":"binningstrategies/#binning-strategies","title":"Binning Strategies","text":"<p>The following binning strategies for features and target variable are supported:</p> <ul> <li>Equal Width Binning</li> <li>Equal Frequency Binning (Percentile Binning)</li> <li>Adaptive Binning (Target-aware)</li> <li>Clustering Binning (e.g., K-means)</li> <li>Domain-Specific Binning</li> </ul>"},{"location":"drifttypes/","title":"DriftSense","text":"<p>Welcome to the DriftSense documentation!</p> <p>The <code>DriftSense</code> package is designed to calculate the drift or stability of data distributions across datasets. This is a critical metric for evaluating changes in data distributions over time and ensuring the continued validity of AI/ML models.</p>"},{"location":"drifttypes/#drift-types","title":"Drift Types","text":"<ul> <li>Feature Drift \u2013 Measures changes in input feature/variable distributions over different time-periods or across different datasets</li> <li>Target Drift \u2013 Monitors shifts in the target variable over different time-periods or across different datasets</li> <li>Model Drift \u2013 Uses predicted score/ predicted labels to assess model behavior over different time-periods or across different datasets</li> </ul>"},{"location":"faqs/","title":"Frequently Asked Questions","text":"<p>Here are some of the most commonly asked questions about the <code>DriftSense</code> package.</p>"},{"location":"faqs/#q1-what-is-the-purpose-of-the-driftsense-package","title":"Q1: What is the purpose of the DriftSense package?","text":"<p>A: The package is designed to monitor the stability or drift of features, targets, and model predictions over time using techniques like CSI (Characteristic Stability Index) and PSI (Population Stability Index). This is especially critical in regulated industries like banking and finance.</p>"},{"location":"faqs/#q2-what-are-csi-and-psi","title":"Q2: What are CSI and PSI?","text":"<p>A: CSI and PSI are statistical indices used to quantify the shift between two distributions. CSI is typically used for continuous/categorical data comparisons while PSI is often used for model monitoring in production systems.</p>"},{"location":"faqs/#q3-do-i-need-to-bin-the-features-before-calculating-stability","title":"Q3: Do I need to bin the features before calculating stability?","text":"<p>A: No. You do not need to bin the feature before calculating stability or drift. <code>DriftSense</code> function uses <code>get_bin_edges</code> function internally to compute the bins as per binning methods.  However, you can use function <code>get_bin_edges()</code> provided in the package to get the bin values for different binning methods.</p>"},{"location":"faqs/#q4-can-i-use-this-package-for-both-classification-and-regression-models","title":"Q4: Can I use this package for both classification and regression models?","text":"<p>A: Yes, you can monitor prediction drift for both classification and regression models by applying binning and drift method of choice.  You can use <code>calculate_feature_drift</code> for single feature or <code>calculate_all_features_drift</code> for all features in dataframe including target and prediction (if available)</p>"},{"location":"faqs/#q5-what-happens-if-i-pass-nan-values-to-the-functions","title":"Q5: What happens if I pass NaN values to the functions?","text":"<p>A: NaN values are automatically filtered out for most functions except domain-specific binning. It's recommended to clean or preprocess your data before applying stability checks.</p>"},{"location":"faqs/#q6-how-often-should-i-monitor-for-drift","title":"Q6: How often should I monitor for drift?","text":"<p>A: It's common practice to monitor data drift weekly or monthly, depending on the criticality of the system. Regulatory guidelines may also mandate monitoring frequencies.</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>Welcome to the DriftSense installation guide. Follow the instructions below to install the package and set up your environment for using the binning and stability evaluation utilities.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<p>Before installing the package, ensure the following dependencies are available:</p> <ul> <li><code>Python 3.7+</code></li> <li><code>numpy</code></li> <li><code>scikit-learn</code></li> <li><code>pytest</code> (optional, for testing purposes)</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":""},{"location":"installation/#option-1-install-via-pip-recommended-for-stable-version","title":"Option 1: Install via pip (recommended for stable version)","text":"<pre><code>pip install DriftSense\n</code></pre>"},{"location":"installation/#option-2-clone-from-github-and-install-locally","title":"Option 2: Clone from GitHub and install locally","text":"<pre><code>git clone https://github.com/DataStabilityMetrics/DriftSense.git\ncd DriftSense\npip install -r requirements.txt\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Go to the Usage Guide for tutorials and code examples in ML evaluation or monitoring system</li> <li>Explore API Reference to integrate it into ML evaluation or monitoring system</li> <li>Check out the Home Page for a conceptual overview of the drift or stability metrics</li> </ul>"},{"location":"reference/api_index/","title":"API Overview","text":"<p>Welcome to the DriftSense API Reference Guide. This section provides technical documentation for all core functions in the package.</p> <p>Use this guide to understand the function signatures, expected parameters, and example usages. This is especially helpful when integrating the package into larger projects or developing automation and monitoring tools.</p>"},{"location":"reference/api_index/#modules-covered","title":"Modules Covered","text":"Module Description <code>get_bin_edges</code> Utilities for calculating bin edges using various binning strategies. <code>calculate_feature_drift</code> Computes drift or stability score (e.g., CSI or PSI) for feature or target or prediction variable. <code>calculate_all_features_drift</code> Computes drift or stability for all features in the dataframe including target and prediction (if available within dataframe). <code>create_drift_report</code> Generates drift or stability report of features, target, prediction variable (if available within dataframe)."},{"location":"reference/api_index/#api-documentation-topics","title":"API Documentation Topics","text":""},{"location":"reference/api_index/#binning-function","title":"Binning Function","text":"<ul> <li><code>get_bin_edges</code>   Calculate bin edges using strategies like equal width binning, equal frequency binning, adaptive, and more.</li> </ul>"},{"location":"reference/api_index/#stability-function","title":"Stability Function","text":"<ul> <li> <p><code>calculate_feature_drift</code>   Evaluates drift between reference and actual datasets. can be used for features, target variable as well as predictions</p> </li> <li> <p><code>calculate_all_features_drift</code>   Evaluates drift for all features columns (e.g. CSI) including target column and predictions (e.g. CSI/PSI) .</p> </li> </ul>"},{"location":"reference/api_index/#stability-report","title":"Stability Report","text":"<ul> <li> <p><code>create_drift_report</code></p> </li> <li> <p>generates drift or stability report of feature columns and target column in the dataset. </p> </li> <li> <p>Provides the checks to verify the numbers of records matches with the total counts in the individual feature drift calculation.</p> </li> </ul>"},{"location":"reference/api_index/#notes","title":"Notes","text":"<ul> <li>For adaptive binning strategy, <code>target</code> variable is required.</li> <li>For domain-specific binning, list of bin edges should be provided.</li> <li>Currently this package supports PSI and CSI methods for drift metrics. </li> <li>Future releases will include additional methods of drift evaluation. </li> </ul>"},{"location":"reference/api_index/#navigation","title":"Navigation","text":"<ul> <li>Home</li> <li>Usage Guide</li> <li>Installation</li> </ul>"},{"location":"reference/calculate_all_features_drift/","title":"Stability Function (All Features)","text":""},{"location":"reference/calculate_all_features_drift/#calculate_all_features_drift","title":"<code>calculate_all_features_drift()</code>","text":"<p>Computes the Character Stability Index for categorical features.</p>"},{"location":"reference/calculate_all_features_drift/#driftsense.calculate_all_features_drift","title":"<code>driftsense.calculate_all_features_drift</code>","text":""},{"location":"reference/calculate_all_features_drift/#driftsense.calculate_all_features_drift-functions","title":"Functions","text":""},{"location":"reference/calculate_all_features_drift/#driftsense.calculate_all_features_drift.calculate_all_features_drift","title":"<code>calculate_all_features_drift(reference_df: pd.DataFrame, new_df: pd.DataFrame, bins: Union[int, Dict[str, list]] = 10, method: str = 'equal_freq') -&gt; Tuple[pd.DataFrame, Dict[str, pd.DataFrame]]</code>","text":"<p>Compute drift/stability for all features in the dataframe.</p> <p>Parameters: - reference_df (DataFrame): Baseline dataset.</p> <ul> <li> <p>new_df (DataFrame): New dataset. Monitoring/Test/Validation.</p> </li> <li> <p>bins (int or dict): Number of bins (for numerical) or category handling.</p> </li> <li> <p>method (str): Binning method ('equal_width', 'equal_freq', 'adaptive', 'kmeans', 'domain').</p> </li> </ul> <p>Returns:</p> <ul> <li> <p>Tuple containing:</p> <ol> <li> <p>DataFrame with CSI values for each column.</p> </li> <li> <p>Dictionary of detailed CSI DataFrames for each feature.</p> </li> </ol> </li> </ul>"},{"location":"reference/calculate_feature_drift/","title":"Stability Function (One Feature)","text":""},{"location":"reference/calculate_feature_drift/#calculate_feature_drift","title":"<code>calculate_feature_drift()</code>","text":"<p>Computes the Character Stability Index for categorical features.</p>"},{"location":"reference/calculate_feature_drift/#driftsense.calculate_feature_drift","title":"<code>driftsense.calculate_feature_drift</code>","text":""},{"location":"reference/calculate_feature_drift/#driftsense.calculate_feature_drift-functions","title":"Functions","text":""},{"location":"reference/calculate_feature_drift/#driftsense.calculate_feature_drift.calculate_feature_drift","title":"<code>calculate_feature_drift(reference: Union[List[float], np.ndarray], actual: Union[List[float], np.ndarray], bins: Union[int, List[float]] = 10, method: str = 'equal_freq') -&gt; dict</code>","text":"<p>Calculate Characteristic/Population Stability Index (CSI/PSI) for a given variable.</p> <p>Parameters: - reference (array-like): Baseline dataset values. - actual (array-like): New dataset values. - bins (int or list): Number of bins (if numeric) or predefined categories. - method (str): Binning strategy for numerical data ('equal_width', 'equal_freq', 'adaptive', 'kmeans', or 'domain').</p> <p>Returns: - dict: Feature Drift dataframe containing the actual count, reference count, actual percentage, reference percentage, drift score for each bin and final drift score is aggregate sum of bin-wise drift score.</p>"},{"location":"reference/create_drift_report/","title":"Stability Report","text":""},{"location":"reference/create_drift_report/#get_stability_report","title":"<code>get_stability_report()</code>","text":"<p>Computes the Character Stability Index for categorical features.</p>"},{"location":"reference/create_drift_report/#driftsense.create_drift_report","title":"<code>driftsense.create_drift_report</code>","text":""},{"location":"reference/create_drift_report/#driftsense.create_drift_report-functions","title":"Functions","text":""},{"location":"reference/create_drift_report/#driftsense.create_drift_report.create_drift_report","title":"<code>create_drift_report(summary_df: pd.DataFrame, detailed_dfs: Dict[str, pd.DataFrame], file_path: str = 'Drift_Report.html', csi_threshold: float = 0.25) -&gt; None</code>","text":"<p>Save the summary and detailed CSI DataFrames into a single HTML file with Pass/Fail test.</p> <p>Parameters: - summary_df (DataFrame): Summary CSI values per feature.</p> <ul> <li> <p>detailed_dfs (dict): Dictionary of detailed CSI DataFrames.</p> </li> <li> <p>file_path (str): Path where the output HTML file will be saved to.</p> </li> <li> <p>csi_threshold (float): CSI threshold for test pass/fail.</p> </li> </ul> <p>Returns: - None (writes an HTML file to disk)</p>"},{"location":"reference/get_bin_edges/","title":"API: get_bin_edges","text":""},{"location":"reference/get_bin_edges/#driftsense.get_bin_edges","title":"<code>driftsense.get_bin_edges</code>","text":""},{"location":"reference/get_bin_edges/#driftsense.get_bin_edges.get_bin_edges","title":"<code>get_bin_edges(reference: Union[List[float], np.ndarray], bins: Union[int, List[float]] = 10, method: str = 'equal_width', target: Optional[Union[List[int], np.ndarray]] = None) -&gt; Union[np.ndarray, List[float]]</code>","text":"<p>Compute bin edges for numerical variables or categorical variables based on the specified binning method.</p> <p>This function is used for binning continuous variables into discrete intervals,  commonly used in statistical metrics for stability evaluation (such as CSI - Characteristic Stability Index or PSI - Population Stability Index).</p> <p>This function supports multiple binning strategies.</p>"},{"location":"reference/get_bin_edges/#driftsense.get_bin_edges.get_bin_edges--parameters","title":"Parameters:","text":"<ul> <li> <p>reference : array-like     The input data (typically from the expected or reference dataset) to compute bin edges on.     Should be numeric for most methods, but may be categorical for 'domain' binning.</p> </li> <li> <p>bins : int or list     Number of bins to create (if method is numeric), or a list of bin edges/categories (only used if <code>method=\"domain\"</code>).     If method is numeric ('equal_width', 'equal_freq', etc.), this is the number of bins.     If method='domain', this must be a list of bin edges or category labels.</p> </li> <li> <p>method : str, default=\"equal_width\"</p> <p>The binning strategy to use. Supported options:</p> <ul> <li> <p>\"equal_width\" : Divides the numeric range into equal-width intervals.</p> </li> <li> <p>\"equal_freq\"  : Divides numeric data such that each bin contains an approximately equal number of samples.</p> </li> <li> <p>\"adaptive\"    : Uses a Decision Tree classifier to find splits that best separate the numeric data.</p> </li> <li> <p>\"kmeans\"      : Applies k-means clustering and uses the cluster centers as bin edges for numeric data.</p> </li> <li> <p>\"domain\"      : Accepts a user-defined list of bin edges or category labels directly (numeric or categorical).</p> </li> </ul> </li> <li> <p>target : array-like, optional</p> <p>Required if method='adaptive'. Target variable used to guide DecisionTree-based binning.</p> </li> </ul>"},{"location":"reference/get_bin_edges/#driftsense.get_bin_edges.get_bin_edges--returns","title":"Returns:","text":"<p>list or np.ndarray</p> <pre><code>The list of bin edges (or categorical bin labels) to be used for binning.\n</code></pre>"},{"location":"reference/get_bin_edges/#driftsense.get_bin_edges.get_bin_edges--raises","title":"Raises:","text":"<ul> <li> <p>ValueError:</p> <p>If the input is empty, or if method is invalid.</p> </li> <li> <p>TypeError:</p> <p>If the input is not numeric where required, or if domain bins are improperly formatted.</p> </li> </ul>"},{"location":"reference/get_bin_edges/#driftsense.get_bin_edges.get_bin_edges--examples","title":"Examples:","text":"<p>get_bin_edges([1, 2, 3, 4, 5], bins=2, method=\"equal_width\") array([1., 3., 5.])</p> <p>get_bin_edges([10, 20, 30, 40, 50], bins=2, method=\"equal_freq\") array([10., 30., 50.])</p> <p>get_bin_edges([1, 2, 3, 4, 5], bins=[0, 2, 5], method=\"domain\") [0, 2, 5]</p>"},{"location":"reference/get_bin_edges/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>data</code> <code>np.ndarray</code> \u2705 Yes Input array of numeric values <code>bins</code> <code>int</code> \u2705 Yes Number of bins <code>method</code> <code>str</code> \u2705 Yes Binning method: <code>\"equal\"</code>, <code>\"quantile\"</code>, or <code>\"adaptive\"</code> <code>target</code> <code>Optional[np.ndarray]</code> \u274c Only for <code>\"adaptive\"</code> Target array used for supervised binning"},{"location":"reference/get_bin_edges/#returns","title":"Returns","text":"<ul> <li><code>np.ndarray</code>: An array of bin edge values, excluding the min and max of the data.</li> </ul>"},{"location":"reference/get_bin_edges/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/get_bin_edges/#1-equal-width-binning","title":"1. Equal-width Binning","text":"<pre><code>from get_bin_edges import get_bin_edges\nimport numpy as np\n\ndata = np.array([1, 5, 10, 15, 20, 25, 30])\nbin_edges = get_bin_edges(data, bins=3, method=\"equal\")\nprint(bin_edges)\n</code></pre> <p>Output: <pre><code>[10.0, 20.0]\n</code></pre></p>"},{"location":"reference/get_bin_edges/#2-equal-frequency-quantile-binning","title":"2. Equal-frequency (quantile) Binning","text":"<pre><code>bin_edges = get_bin_edges(data, bins=3, method=\"quantile\")\nprint(bin_edges)\n</code></pre> <p>Output: <pre><code>[10.0, 20.0]\n</code></pre></p>"},{"location":"reference/get_bin_edges/#3-adaptive-binning-with-target-variable","title":"3. Adaptive Binning with Target Variable","text":"<pre><code>target = np.array([0, 0, 1, 1, 0, 1, 0])\nbin_edges = get_bin_edges(data, bins=3, method=\"adaptive\", target=target)\nprint(bin_edges)\n</code></pre> <p>Output (example): <pre><code>[12.5, 27.5]\n</code></pre></p>"},{"location":"reference/get_bin_edges/#notes","title":"Notes","text":"<ul> <li>If using <code>\"adaptive\"</code>, the <code>target</code> argument must be passed.</li> <li>The returned list contains bin edges, not bin counts.</li> <li>NaN values in <code>data</code> are automatically filtered out before binning.</li> <li>The bin edges returned are always sorted and do not include <code>min</code> or <code>max</code> bounds.</li> </ul>"},{"location":"reference/get_bin_edges/#see-also","title":"See Also","text":"<ul> <li>Drift Calculation Guide</li> </ul>"},{"location":"usage/","title":"Usage Guide Overview","text":"<p>This section provides practical instructions on using the <code>DriftSense</code> package.</p>"},{"location":"usage/#core-functionalities","title":"Core Functionalities","text":"<ol> <li> <p>Feature Binning    Generate bin edges using one of several supported binning strategies.</p> </li> <li> <p>Stability Calculation (Single Feature)    Measure stability or drift for a single feature between reference and comparison datasets.</p> </li> <li> <p>Stability Calculation (All Features)    Measure stability or drift across all variables in a dataset.</p> </li> <li> <p>Report Generation    Generate comprehensive drift and stability report for AI/ML models.</p> </li> </ol> <p>\ud83d\udc49 Proceed to Feature Binning or Stability Function.</p>"},{"location":"usage/get_bin_edges_usage/","title":"Feature Binning","text":"<p>This section explains how to bin features using the available methods in <code>DriftSense</code>.</p>"},{"location":"usage/get_bin_edges_usage/#equal-width-example","title":"Equal Width Example","text":"<pre><code>from driftsense import get_bin_edges\n\nedges = get_bin_edges([1, 2, 3, 4, 5], bins=3, method=\"equal_width\")\nprint(edges)  # [1.0, 3.0, 5.0]\n</code></pre>"},{"location":"usage/get_bin_edges_usage/#adaptive-binning-example","title":"Adaptive Binning Example","text":"<pre><code>from driftsense import get_bin_edges\nimport numpy as np\n\ndata = np.array([1.2, 3.4, 2.1, 5.7])\ntarget = np.array([0, 0, 1, 1])\n\nedges = get_bin_edges(data, bins=3, method=\"adaptive\", target=target)\nprint(\"Bin edges:\", edges)\n</code></pre>"},{"location":"usage/get_bin_edges_usage/#related-links","title":"Related Links","text":"<ul> <li>API: get_bin_edges</li> </ul>"},{"location":"usage/stability_function/","title":"Stability/Drift Functions Usage Guide","text":"<p>This page explains how to use the key stability functions available in the <code>DriftSense</code> package. These functions help measure data drift, also called stability, for features, targets, and model predictions.</p> <p>These functions are essential for understanding how your data, features, and model outputs change over time or across different datasets.</p>"},{"location":"usage/stability_function/#overview","title":"Overview","text":"<p>The package supports different types of stability assessments:</p> <ol> <li> <p>Target Stability / Drift    Measures the change in the target variable distribution.</p> </li> <li> <p>Feature Stability / Drift    Assesses the distributional shift of individual features.</p> </li> <li> <p>Model Prediction Stability / Drift    Evaluates the stability of model predictions over time.</p> </li> </ol>"},{"location":"usage/stability_function/#available-functions","title":"Available Functions","text":""},{"location":"usage/stability_function/#1-calculate_feature_stability","title":"1. <code>calculate_feature_stability()</code>","text":"<p>Compares the distribution of a feature in reference and current datasets using a selected binning method.</p> <pre><code>from driftsense import calculate_feature_drift\n\nstability_score = calculate_feature_drift(\n    reference_data=ref_df[\"feature_1\"],\n    current_data=curr_df[\"feature_1\"],\n    method=\"equal_width\",  # or \"quantile\", \"adaptive\", etc.\n    bins=5\n)\nprint(\"Drift/Stability Score:\", stability_score)\n</code></pre>"},{"location":"usage/stability_function/#2-calculate_all_features_stability","title":"2. <code>calculate_all_features_stability()</code>","text":"<p>Calculates stability scores for all numeric features in your dataset.</p> <pre><code>from driftsense import calculate_all_features_drift\n\nstability_df = calculate_all_features_drift(\n    reference_data=ref_df,\n    current_data=curr_df,\n    method=\"quantile\",\n    bins=10\n)\nprint(stability_df.head())\n</code></pre>"},{"location":"usage/stability_function/#3-create_drift_report","title":"3. <code>create_drift_report()</code>","text":"<p>Generates a HTML report including summarised drift/stability score with binning method used, drift detection flag, bin-wise drift/stability scores for each feature / target at granular level, and warnings for unstable features.</p> <pre><code>from driftsense import create_drift_report\n\ncreate_drift_report(\n    reference_data=ref_df,\n    current_data=curr_df,\n    method=\"adaptive\",\n    bins=4,\n    output_path=\"Drift_Stability_Report.html\"\n)\n</code></pre>"},{"location":"usage/stability_function/#notes","title":"Notes","text":"<ul> <li>Binning strategy significantly affects the result; choose based on use case.</li> <li>Adaptive binning requires a target variable.</li> <li>Feature stability/drift values above a threshold (e.g., 0.1 or 0.2) may indicate drift.</li> </ul>"},{"location":"usage/stability_function/#usage-example","title":"Usage Example","text":"<pre><code>import numpy as np\nfrom driftsense import calculate_feature_drift\n\nexpected = np.array([0.25, 0.25, 0.25, 0.25])\nactual = np.array([0.10, 0.20, 0.30, 0.40])\n\nvalue = calculate_feature_drift(expected, actual)\nprint(f\"Drift/Stability Value (CSI): {value:.4f}\")\n</code></pre>"},{"location":"usage/stability_function/#feature-stability-across-time","title":"Feature Stability Across Time","text":"<p>To evaluate feature drift between two datasets:</p> <pre><code>from driftsense import calculate_feature_drift\n\n# input_distributions: already binned distributions\nfeature_drift_score = calculate_feature_drift(expected_dist, actual_dist)\n\nprint(\"Feature Drift/Stability (CSI):\", feature_drift_score)\n</code></pre>"},{"location":"usage/stability_function/#target-or-model-drift-example","title":"Target or Model Drift Example","text":"<pre><code>from DriftSense import calculate_feature_drift\n\n# Compare target or model prediction distributions over time\ntarget_drift = calculate_feature_drift(expected_target_bins, actual_target_bins)\n\nprint(\"Target Drift:\", target_drift)\n</code></pre>"},{"location":"usage/stability_function/#notes_1","title":"Notes","text":"<ul> <li>Drift values &gt; 0.2 generally indicate significant drift.</li> <li>Drift methods require binning to be performed. You can use <code>get_bin_edges()</code> to see what bins are generated using vrious binning strategies.</li> <li>Target and model drift are often monitored weekly/monthly in regulated industries. In some cases, it gets monitored quarterly or semiannually.    This monitoring frequency is dependent on the business usage of the model.</li> </ul>"},{"location":"usage/stability_function/#recommended-monitoring-thresholds","title":"Recommended Monitoring Thresholds","text":"<p>The Following guidance is applicable for PSI/CSI drift method  | Stability Metric | Threshold        | Interpretation                 | |------------------|------------------|--------------------------------| | Drift &lt; 0.1        | Stable            | No action needed               | | 0.1 \u2264 Drift \u2264 0.2  | Moderate Drift    | Investigate if recurring       | | Drift &gt; 0.2        | High Drift        | Immediate attention required   |</p>"},{"location":"usage/stability_function/#related-links","title":"Related Links","text":"<ul> <li>Feature Binning</li> <li>Feature Stability API Reference</li> <li>Get Bin Edges API</li> </ul>"}]}